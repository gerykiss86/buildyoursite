python -m playwright install

npx playwright open --browser=chromium

npx playwright open --browser=chromium --channel=chrome --user-data-dir="C:\Users\info\AppData\Local\Google\Chrome\User Data" --profile-directory="Default"


python generate-bolt-site.py "Create a simple calculator" --output downloads

---
linux:
 1. Start VNC (if not running):
  vncserver :1 -geometry 1920x1080 -depth 24

  2. Connect to VNC:
  - Server: 82.165.141.243:5901
  - Password: changeme123

  3. In VNC terminal, run:
  cd /git/buildyoursite/bolt-playwright
  DISPLAY=:1 python3 login-bolt-vnc.py

  4. Log in manually in the Chromium browser that opens

  5. Close the browser when done to save the session

  The script will save your logged-in session to /git/buildyoursite/bolt-playwright/chromium-profile-linux/ which is
   used by the generate-bolt-linux.py script.
   
----
/tmp/ssh-exec.sh "cd /git/buildyoursite/bolt-playwright && xvfb-run -a python3 generate-bolt-linux.py --headless '{{ $json.data.input }}'"
---
 - Claude CLI: /tmp/ssh-exec.sh "su - clauderunner -c 'claude \"{{ $json.prompt }}\"'"
  - Any other host command: /tmp/ssh-exec.sh "your-command-here '{{ $json.parameter }}'"
---

certbot certonly --manual --preferred-challenges dns --cert-name skykey.at -d skykey.at -d '*.skykey.at' --expand
---
echo "{{ $json.stdout }}" | grep 'Generated site saved in:' | sed 's/.*Generated site saved in: //' | tail -n1
---
/tmp/ssh-exec.sh "su clauderunner -c \"claude --dangerously-skip-permissions 'Output only this text without using any tools: hello_from_claude'\" < /dev/null"
---
/tmp/ssh-exec.sh "su clauderunner -c \"claude --dangerously-skip-permissions 'Output only this text without using any tools: {{ $json.stdout }}'\" < /dev/null"3
---
/tmp/ssh-exec.sh "su clauderunner -c \"claude --dangerously-skip-permissions '1. Unzip the zip file located in: {{ $json.stdout }} 2. Change into the extracted project folder. 3. 
  Build the project using npm run build or appropriate build command. 4. Deploy the build output to a new subfolder under: /var/www/skykey/ (subfolder name = short company name 
  extracted from project + demo, e.g., acme-demo). 5. Output ONLY the complete deployment URL in the format https://<subfolder>.skykey.at without any additional text or 
  explanation.'\" < /dev/null"
---
/tmp/ssh-exec.sh "curl -X POST http://127.0.0.1:5555/execute -H 'Content-Type: application/json' -d '{\"prompt\": \"Print {{ $json.stdout }} to the console\"}'" 
---
curl -X GET http://127.0.0.1:5555/health
----
/tmp/ssh-exec.sh "curl -X POST http://127.0.0.1:5555/execute -H 'Content-Type: application/json' -d '{\"prompt\": \"Print {{ $json.stdout }} to the console\"}'" 
---
/tmp/ssh-exec.sh "curl -X POST http://127.0.0.1:5555/execute -H 'Content-Type: application/json' -d '{\"prompt\": \"nzip the zip file located at {{ $json.stdout }} then change into the extracted project folder then build the project using npm run build then deploy the build output to a new subfolder under /var/www/skykey/ where subfolder name is short company name from project plus demo then output ONLY the complete deployment URL in format https://subfolder.skykey.at\"}'" 
---
